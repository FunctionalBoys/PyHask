Program ::= Declaration* Function* Class* 'main:' Block
SimpleType ::= ('int' | 'float' | 'string' | 'bool')
ComposedType ::= SimpleType '[' IntLiteral ']' | 'id'
Class ::= 'class' 'id' ('(' 'id' ')')? ':' ('members:' ('id' (',' 'id')* ':' SimpleType ('[' IntLiteral ']')?)+)* Function+
Function ::= 'def' 'id' '(' ('id' ':' SimpleType ( ',' 'id' ':' SimpleType)*)? ')' '->' (SimpleType | 'void') ':' Block
Statement ::= FunctionCall | MethodCall | Declaration | Assignment | If | While  | For | Print | Read | 'return' Expr? | 'continue' | 'pass' | 'break'
Assignment ::= 'id' ('.' 'id')? ('[' Expr ']')? ':=' Expr
Declaration ::= 'let' 'id' (',' 'id')* ':' ComposedType (':=' Expr)?
Print ::= 'print' '(' Expr ')'
Read ::= 'read' '(' ')'
FunctionCall ::= 'id' '(' (Expr (',' Expr)*)? ')'
MethodCall ::= ('id' | 'self') '.' 'id' '(' (Expr (',' Expr)*)? ')'
MemberAccess ::= ('id' | 'self') '.' 'id' ('[' Expr ']')?
Block ::= Statement+
If ::= 'if' Expr ':' Block ('elif' Expr ':' Block)* ('else' Block)?
While ::= 'while' Expr ':' Block
For ::= 'for' 'id' (',' 'id')* ':' SimpleType ':=' Expr ':' Expr ':' Assignment ':' Block
Expr ::= AndExpr 'or' Expr | AndExpr
AndExpr ::= NotExpr 'and' AndExpr | NotExpr
NotExpr ::= 'not'? CExpr
CExpr ::= FirstLevel ('==' | '!=' | '>' | '<' | '<=' | '>=') CExpr | FirstLevel
FirstLevel ::= SecondLevel ('+' | '-') FirstLevel | SecondLevel
SecondLevel ::= ThirdLevel ('*' | '/') SecondLevel | ThirdLevel
ThirdLevel ::= FourthLevel '**' ThirdLevel | FourthLevel
FourthLevel ::= ('+' | '-')? Factor
Factor ::= 'id' | FunctionCall | MethodCall | ArrayAccess | MemberAccess | '(' Expr ')' | Integer | Float | Bool | String
Integer ::= IntLiteral
Float ::= FloatLiteral
Bool ::= 'True' | 'False'
ArrayAccess ::= 'id' '[' Expr ']'
